<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(ProjectDir)bin\Debug\Newtonsoft.Json.dll" #>
<#@ assembly name="$(ProjectDir)bin\Debug\T4AzureArmTemplateGenerator.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Serialization" #>
<#@ import namespace="T4AzureArmTemplateGenerator" #>
<#@ import namespace="T4AzureArmTemplateGenerator.Namespaces" #>
<#@ import namespace="T4AzureArmTemplateGenerator.Namespaces.Input" #>
<#@ import namespace="T4AzureArmTemplateGenerator.Namespaces.Output" #>
<#@ output extension=".json" #>
<#@ include file="../TemplateFileManager.CS.ttinclude" #>
<#
// This assumes that our type is Namespaces and that the definition of the entity we 
// are deserializing is kept in a dll called 'T4AzureArmTemplateGenerator.dll' in namespace 
// T4AzureArmTemplateGenerator.Namespaces, modify as needed

// TemplateFileManager.CS.ttinclude was obtained from https://www.nuget.org/packages/T4.TemplateFileManager/

// Custom tool to use: TextTemplatingFileGenerator

// How to Setup:
// 1. Build Project to get Newtonsoft.dll and your Contracts.dll in Debug dir (or specify a different path)
// 2. Add a file with the same base name and .json extension
// 3. Populate file with data
// 4. Replace 'MyEntity' with they type of the json object
// 5. Change assembly and namespace to match they type of the json object
// 6. Save file or use Build > Transform T4 templates
// 7. In property view for the resulting .json file remember to set the Do not copy on build

string parameterFileName = "namespace.parameters-{0}.json";

NamespaceRootOutputJsonConverter converter = new NamespaceRootOutputJsonConverter(new NamespaceRootOutputParser());
Dictionary<string, string> parametersOutput = converter.ToJson(File.ReadAllText(Path.ChangeExtension(Host.TemplateFile,".input.json")));

var manager = TemplateFileManager.Create(this);
foreach(KeyValuePair<string, string> kvp in parametersOutput) {
	manager.StartNewFile(string.Format(parameterFileName, kvp.Key));
	this.Write(kvp.Value);
}
manager.Process();
#>